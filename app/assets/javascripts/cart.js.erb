// cart/show
$('.cart.show').ready(function() {
    function ShowViewModel() {
        var self = this;

        // Die Bestellzeilen.
        self.lineItems = ko.observableArray();
        self.loaded = ko.observable(false);

        // Zwischensumme (ohne Versandkosten) für den Warenkorb.
        self.subTotal = ko.pureComputed(function() {
            return _.reduce(self.lineItems(), function(m, x) { return m + x.qty() * x.price; }, 0);
        });

        // Anzahl der Artikel (berücksichtigt qty).
        self.productCount = ko.pureComputed(function() {
            return _.reduce(self.lineItems(), function(m, x) { return m + x.qty(); }, 0);
        });

        self.empty = ko.pureComputed(function() {
            return self.lineItems().length == 0 && self.loaded();
        });

        self.remove = function(lineItemId) {
            self.lineItems(
                _(self.lineItems()).reject(function(li) { return li.id === lineItemId; }));
            $.when($.ajax({
                type: "DELETE",
                url: 'line_items/' + lineItemId,
                dataType: 'json'
            }))
            .fail(function() {
                alert("Uups. Da ist uns ein Fehler passiert. Probier's nochmal. Danke.");
            });
        };

        var _updateQty = function(li) {
            $.when($.ajax({
                type: "POST",
                url: 'line_items/' + li.id,
                data: { _method:'PATCH', qty : li.qty() },
                dataType: 'json'
            }))
            .fail(function() {
                alert("Uups. Da ist uns ein Fehler passiert. Probier's nochmal. Danke.");
            });
        };

        // Warenkorbdaten vom Server laden.
        $.when($.getJSON('cart')).then(function(data) {
            self.loaded(true);
            self.lineItems(_(data.line_items).map(function(li) {
                li = _.extend(li, {
                    // Die Anzahl muss überwacht werden.
                    qty: ko.observable(li.qty),
                   // Zwischensumme dieser Bestellzeile.
                   sum: ko.pureComputed(function(){
                       return this.price * this.qty();
                   }, li),
                   incQty: function(){
                       this.qty(this.qty() + 1);
                   }.bind(li),
                   decQty: function(){
                       this.qty(Math.max(1, this.qty() - 1));
                   }.bind(li),

                });

                li.qty.subscribe(_.debounce(function() { 
                    _updateQty(li);
                }, 700));


                return li;
            }));
        })
        .fail(function() { alert('Warenkorb konnte nicht geladen werden!'); });
    }

    vm = new ShowViewModel();
    ko.applyBindings(vm);
});
